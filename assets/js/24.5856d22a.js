(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{525:function(v,_,e){"use strict";e.r(_);var t=e(4),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("ul",[e("li",[v._v("除非做不出来，不然尽量少用暴力法")]),v._v(" "),e("li",[v._v("首先把极限情况列出，减少运行时间")]),v._v(" "),e("li",[v._v("多使用双指针算法，减少运算")]),v._v(" "),e("li",[v._v("寻找题目的突破口")]),v._v(" "),e("li",[v._v("遇到数组时多考虑一下是否有必要先排序")]),v._v(" "),e("li",[v._v("可以使用Set数据结构去重")]),v._v(" "),e("li",[v._v("位移操作可以模拟乘除法")]),v._v(" "),e("li",[v._v("可以通过位运算来比较数值")]),v._v(" "),e("li",[v._v("二分查找、双指针法最基本的都是比较大小来移动下标")]),v._v(" "),e("li",[v._v("对于比较大的问题，可以使用动态规划法（"),e("code",[v._v("dp算法")]),v._v("）来拆分成多个子问题解决")]),v._v(" "),e("li",[v._v("计算连续值可使用reduce（例："),e("code",[v._v("output.reduce((prev, curr) => Number(prev) + Number(curr))")]),v._v("）")]),v._v(" "),e("li",[v._v("厄拉多塞筛法(质数筛法)，以此找出质数并划去它的倍数，最后剩下的就都是质数了")]),v._v(" "),e("li",[v._v("比较类题目可使用字典"),e("code",[v._v("Map()")]),v._v("来存储比较")]),v._v(" "),e("li",[v._v("若一个数n为2的幂次方，那这个数的二进制数最高位为1，其他位都为0，且n-1最高位为0，其他位都为1，即有"),e("code",[v._v("n > 0 && (n & (n - 1)) === 0")])]),v._v(" "),e("li",[e("code",[v._v("(num & 1) == 0")]),v._v("判断是否是偶数")]),v._v(" "),e("li",[v._v("二分查找的计算"),e("code",[v._v("(right + left) / 2")]),v._v("可以修改为"),e("code",[v._v("left + (right - left) / 2")]),v._v("，防止溢出")]),v._v(" "),e("li",[v._v("使用&来判断2的倍数，如"),e("code",[v._v("n & 3")]),v._v("判断4的倍数")]),v._v(" "),e("li",[e("code",[v._v("num = num | 0")]),v._v("去除"),e("code",[v._v("num")]),v._v("的小数部分")]),v._v(" "),e("li",[v._v("重复操作，有多少个1，这个操作就可以执行多少次。"),e("code",[v._v("n = n & (n - 1);")])]),v._v(" "),e("li",[v._v("反码的表示方法是：正数的反码是其本身；负数的反码是在其原码的基础上， 符号位不变，其余各个位取反。补码的表示方法是：正数的补码就是其本身；负数的补码是在其原码的基础上， 符号位不变， 其余各位取反， 最后+1 （即在反码的基础上+1）。算数位移，其中正数右移左边补0，负数右移左边补1。")]),v._v(" "),e("li",[v._v("求进制数低位或者高位值可使用全部为1数与操作，例如"),e("code",[v._v("num & 0xf")])])]),v._v(" "),e("h2",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[v._v("#")]),v._v(" 参考文档")]),v._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/azl397985856/leetcode",target:"_blank",rel:"noopener noreferrer"}},[v._v("详细题目解答"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/MisterBooo/LeetCodeAnimation",target:"_blank",rel:"noopener noreferrer"}},[v._v("动画详解算法思路"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);